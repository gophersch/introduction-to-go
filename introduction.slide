The Go programming language
A fast smooth introduction to the language
15:04 24 Apr 2015
Tags: golang, introduction, discovery

Yannick Heinrich
Software Developer, OpenWeb Technology
blog@yageek.net
http://blog.yageek.net
@yageek


* Go AFK
* Go history

- Project started as internal project at Google in 2007
- Open-sourced in 2009 with a BSD-style license
- Last stable release 1.4.2 (2014/12/10)

.image ./images/gophers.png
.caption _Gopher_ by [[http://www.reneefrench.com][Renée French]]

* Go is blessed by the Gods

- Rob Pike (Golang Project Leader, Unix, UTF-8, Plan 9, Inferno)
- Kenneth Thomson (Unix, C, UTF-8, Plan 9, Turing Award 1983)
- Robert Griesemer (Java HotSpot, Google v8)

* Who uses Go?

Internet:
- [[http://code.google.com/p/vitess/][Youtube]], [[http://blog.disqus.com/post/51155103801/trying-out-this-go-thing][Disqus]], [[https://github.com/tumblr/gocircuit][Tumblr]], [[http://blog.twitch.tv/2014/04/technically-speaking-group-chat-and-general-chat-engineering/][Twitch]], Heroku, Cloudfare, SoundCloud, Scalingo

Nerds:
- [[http://techno-weenie.net/2013/11/2/key-value-logs-in-go/][Github]], [[https://sourcegraph.com/][Sourcegraph]]

Lightweight virtualization:
- [[https://www.docker.com/][Docker]]

UFOS:
- [[http://www.quora.com/Go-programming-language/Is-Google-Go-ready-for-production-use/answer/Kunal-Anand][BBC]], [[https://plus.google.com/114945221884326152379/posts/d1SVaqkRyTL][Novartis]], [[https://groups.google.com/forum/?fromgroups#!topic/golang-nuts/ikt3hcIqicA][Thomson Reuters]]

Candy brewer:
- [[http://code.zynga.com/2013/08/zbase-a-high-performance-elastic-distributed-key-value-store/][Zynga]]


.link https://code.google.com/p/go-wiki/wiki/GoUsers More Golang Users 

* Gopher is the new hipster

- Interest is growing good
.image ./images/growth_search.png _ 700
.caption The growth of Google searches for the term "golang" over the years

- Dozen of Go User Groups
- Big meetings: dotGo, GopherIndia, GothamGo, GopherCon, GoCon

* Adopt Go !

Iron.io rewrites their execution job system in go:

- Dropped from 30 to 2 servers and the second server was used only for redundancy.
- CPU utilization dropped to less than 5%.
- Memory usage dropped. Only a "few hundred KB's of memory (on startup) vs our Rails apps which were ~50MB (on startup)". 
.link http://blog.iron.io/2013/03/how-we-went-from-30-servers-to-2-go.html Iron.IO - How We Went from 30 Servers to 2: Go

.link https://www.youtube.com/watch?t=21&v=mBy20FgB68Q GopherCon 2014 From Node.js to Go by Kelsey Falter

* Go is your best friend

- Polyglott
- Garbage Collected
- Tolerant
- Strongly typed

* Native and static compiled

- No f*** JVM
- Fast compilation, as fast as scripting
- No shared libraries
- All stuff packaged in one binary, runtime included

* Polyglott

- Linux, Mac Os X, FreeBSD, NetBSD, OpenBSD, MS-Windows and Plan 9 (just in case)
- Official supported architectures : x86, amd64, arm32, arm64 - Cross compilation for free

	$ GOOS=windows GOARCH=386 go build main.go
	$ GOOS=darwin GOARCH=amd64 go build main.go
	$ GOOS=freebds GOARCH=arm GOARM=5 go build main.go

- Smart build constraints

	// +build linux,386 darwin,!cgo

	// File name constraints:
	// *_GOOS
	// *_GOARCH
	// *_GOOS_GOARCH

* Polyglott

Example: The `os` package

.image ./images/build_constraints.png _ 500

* Garbage Collected

- No pointer arithmetics
- No malloc, no free
- Mark and Sweep GC
# - Synchronisation based on [[http://spinroot.com/courses/summer/Papers/hoare_1978.pdf][CSP]] (like Erlang, Rust, Akka in Scala)

* Tolerant

For lazy person: easy to work with C code with `cgo`

.code ./code/cgo.go

* Tolerant

For smart people: easy to fine tune with assembly

.image ./images/assembly.png 200 _
.code ./code/arith_386.s

* Strongly typed

- If it compiles, it works (usage of reflection excepted)
- All cast are explicited

* Go from the trench

* One syntax to rule them all

_Syntax_is_not_important..._-_unless_you_are_a_programmer_, Rob Pike

	package main ; import "fmt" ; func main() { 
	fmt.Println("Hello, 世界"); }

`$`go`fmtmain.go`

.play ./code/syntax.go

- Annoying at start
- Fucking good at the end
- `go`fmt` could be easily integrated with Vim, Sublime Text or Atom

* Variables

.play ./code/variables.go

* Functions

.play ./code/functions.go

* Flow control : if else

.play ./code/flow_control_1.go

* Flow control : switch

.play ./code/flow_control_2.go

* Flow control : for

.play ./code/flow_control_3.go

* Array/Slices

.play ./code/array_slice.go

* Map

.play ./code/map.go

* Dependencies manages with packages

.code ./code/module/module.go
.code ./code/packages.go

* Retrieve external dependencies

	import (
	    "github.com/pmylund/go-cache"
	    "launchpad.net/gnuflag"
	    "bitbucket.org/taruti/ssh.go"
	    "code.google.com/p/go-avltree"
	  )
           
`$`go`get`[import]`

* Error management
.play ./code/errors.go

* Deferring 
.play ./code/deferring.go

* Closures
.play ./code/closures.go

* Custom type

.play ./code/custom_types.go

* Custom type

.play ./code/custom_types_2.go

* Composition over inheritance

.play ./code/composition.go

*  

.play ./code/composition_2.go

* Interface and Duck typing
- _When_I_see_a_bird_that_walks_like_a_duck_and_swims_like_a_duck_and_quacks_like_a_duck,_I_call_that_bird_a_duck_  James Whitcomb Riley
- Go deals with polymorphism through the concept of _interface_
- If a struct implements all the methods defined in the interface, it is compatible with it
- No coupling between foreign packages
- Interface should be considered as pointer

* 
.play ./code/interfaces.go

* The empty interface

- Every object implements the empty interface

* Dynamic type checking
.play ./code/interfaces_2.go

* Type assertion
.play ./code/interfaces_3.go

* Concurrency
* Goroutine
* Channel
* Select
* Go come with batteries included
* And a free case
* And free samples
* Demo

* Libraries

- [[https://github.com/avelino/awesome-go][Awesome go]]
- Full Stack Web frameworks: Beego, Revel, Martini (Reflection)
- HTTP Midlewares based framework: negroni
- Abuse of HTTP midlewares
- My recommandation to start : pat (muxer), negroni(HTTP middlewares) and gorilla packages (context, sessions)

* References
* Questions
